import json
import telebot
import sys
import other_files.text as tx
import cv2
import os
import re
import requests
from edit_profile import func_edit_profile
from database import func_database, admin_func
import nudenet
import io
from cordinates_of_cities import city_coords
import threading
from difflib import get_close_matches

data_user = {}
user_states = {}
view_profile = {}
current_chat_id = None

admin_ids = ["6491217944","633986877"]

def func_back_menu(chat_id, text: str):
    markup_menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    back_menu = telebot.types.KeyboardButton('/menu')
    markup_menu.add(back_menu)
    user_states[chat_id] = "menu"
    bot.send_message(chat_id, text, reply_markup=markup_menu)

with open("/home/nikita_user/dating_telegram_bot/main/other_files/config.json") as f:
    data_json = json.load(f)

bot = telebot.TeleBot(data_json['token'])

@bot.message_handler(commands=["data"])
def start(message):
    text_data = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n<b>–£–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ</b>\n- –ò–º—è\n- –ü–æ–ª\n- –ò–Ω—Ç–µ—Ä–µ—Å—ã\n- –í–æ–∑—Ä–∞—Å—Ç\n- –û–ø–∏—Å–∞–Ω–∏–µ\n- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è\n<b>–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ–≥—Ä–∞–º–º–æ–º</b> \n- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n- –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n- –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n- –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ\n- –ö–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n- –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n- –†–∞–∑—Ä–µ—à–µ–Ω–∏—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n- –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–Ω–ª–∞–π–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    bot.send_message(message.chat.id, f"{text_data}", parse_mode = "HTML")
    func_back_menu(message.chat.id, "._.")


def is_admin(user_id):
    return str(user_id) in admin_ids

#admin
@bot.message_handler(commands=['admin'])
def admin_handler(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    item_sql = telebot.types.KeyboardButton('SQL –ó–∞–ø—Ä–æ—Å')
    item_warn = telebot.types.KeyboardButton('–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –≤—Å–µ—Ö')
    item_stat = telebot.types.KeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    markup.row(item_sql, item_warn, item_stat)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=markup)
    user_states[message.chat.id] = "admin_mode"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def is_admin(user_id):
    return str(user_id) in admin_ids

@bot.message_handler(commands=['admin'])
def admin_handler(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    func_back_admin_menu(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "admin_mode")
def handle_admin_commands(message):
    if not is_admin(message.chat.id):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if message.text == 'SQL –ó–∞–ø—Ä–æ—Å':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å:")
        bot.register_next_step_handler(message, handle_sql_query)
    elif message.text == '–ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –≤—Å–µ—Ö':
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        bot.register_next_step_handler(message, handle_warn_all)
    elif message.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        try:
            users_count, user_likes_count = admin_func(select_func="sql_statistic")
            bot.send_message(message.chat.id, f"\n–ü—Ä–æ—Ñ–∏–ª–µ–π —Å–æ–∑–¥–∞–Ω–æ - {users_count}\n–í–∑–∞–∏–º–Ω—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏ - {user_likes_count}\n")
        except Exception as ex:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}")
    elif message.text == '–í—ã—Ö–æ–¥':
        func_back_menu(message.chat.id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–≥–æ –º–µ–Ω—é.")
    else:
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def handle_sql_query(message):
    try:
        sql_query = message.text
        result = admin_func(select_func="sql_request", sql_request=sql_query)
        bot.send_message(message.chat.id, f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:\n{result}")
    except Exception as ex:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}")

def handle_warn_all(message):
    try:
        users_id = admin_func(select_func="receive_users_id")
        warning_message = message.text
        for user_id in users_id:
            bot.send_message(user_id[0], f"‚ö†Ô∏è–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è‚ö†Ô∏è\n{warning_message}")
        bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    except Exception as ex:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {ex}")
#admin

@bot.message_handler(commands=["start", "menu"])
def start(message):
    global current_chat_id
    current_chat_id = message.chat.id

    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    item_profile = telebot.types.KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å üë§')
    item_group = telebot.types.KeyboardButton('–ì—Ä—É–ø–ø–∞ üí¨')
    item_support = telebot.types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†Ô∏è')
    item_settings = telebot.types.KeyboardButton('–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã ü•∞')
    item_mutual_likes = telebot.types.KeyboardButton('C–∏–º–ø–∞—Ç–∏–∏ ‚ù§Ô∏è')
    item_donate = telebot.types.KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ üí∏')
    markup.row(item_mutual_likes)
    markup.row(item_settings, item_profile)
    markup.row(item_group, item_support)
    markup.row(item_donate)

    user_states[message.chat.id] = "menu"

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

def send_profile(chat_id, profile, profile_count, total_profiles):
    text_photo = f"<b>{profile[2]}, {profile[4]}, {profile[5].split(',')[0]}, {profile[7]}</b>\n{profile[8]}\n–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å: {profile[1]}"
    markup = telebot.types.InlineKeyboardMarkup()
    if profile_count < total_profiles - 1:
        next_button = telebot.types.InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data=f"next_profile_{profile_count + 1}")
        markup.add(next_button)
    bot.send_photo(chat_id, profile[6], caption=text_photo, parse_mode="HTML", reply_markup=markup)


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "menu")
def handle_text(message):
    global user_states, view_profile

    if message.text == '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ üí∏':
        token = 'gNUwJTXeNKsF4QXWhDuY'

        support_link = "https://www.donationalerts.com/r/nike1999"
        bot.send_message(message.chat.id, f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: {support_link}")

    elif message.text == 'C–∏–º–ø–∞—Ç–∏–∏ ‚ù§Ô∏è':
        if func_database(message.chat.id, data_user, select_func="check_like_profile"):
            profiles = func_database(message.chat.id, data_user, select_func="viewing_profiles_like")
            if profiles:
                view_profile[message.chat.id] = {"count": 0, "data": profiles}
                func_back_menu(message.chat.id, "–í–∞—à–∏ –≤–∑–∞–∏–º–Ω—ã–µ —Å–∏–º–ø–∞—Ç–∏–∏:")
                send_profile(message.chat.id, profiles[0], 0, len(profiles))
            else:
                bot.send_message(message.chat.id, "–°–∏–º–ø–∞—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –ª–∞–π–∫–æ–≤")
        else:
            bot.send_message(message.chat.id, "–°–∏–º–ø–∞—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –ª–∞–π–∫–æ–≤")


    elif message.text == '–ü—Ä–æ—Ñ–∏–ª—å üë§':
        result = func_database(message.chat.id, data_user, select_func="checking_the_profile")
        if result:
            markup_change = telebot.types.InlineKeyboardMarkup()
            
            button_change = telebot.types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")
            button_delete_profile = telebot.types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="check_delete_profile")
            markup_change.add(button_change) 
            markup_change.add(button_delete_profile) 
            
            date_bd = func_database(message.chat.id, data_user, select_func="send_profile_user")
            text_photo = f"<b>{date_bd[1]}, {date_bd[2]}, {date_bd[3].split(', ')[0]}, {date_bd[4]}</b>\n{date_bd[5]}" 
            bot.send_photo(message.chat.id, date_bd[0], caption=text_photo, parse_mode="HTML", reply_markup=markup_change)
            
        else:
            user_states[message.chat.id] = "creating_profile"
            start_info(message)


    elif message.text == '–ì—Ä—É–ø–ø–∞ üí¨':
        markup_group = telebot.types.InlineKeyboardMarkup()
        button_group = telebot.types.InlineKeyboardButton("–ó–∞—Ö–æ–¥–∏ —É –Ω–∞—Å –≤–µ—Å–µ–ª–æ!!!", url="https://t.me/Encounter_Circle")
        markup_group.add(button_group)
        bot.send_message(message.chat.id, "<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ!</b>", reply_markup=markup_group, parse_mode="HTML")

    elif message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ üõ†Ô∏è':

        markup_support = telebot.types.InlineKeyboardMarkup()
        button_support = telebot.types.InlineKeyboardButton("Did_try", url="https://t.me/Did_try")
        markup_support.add(button_support)
        bot.send_message(message.chat.id, "<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É:</b>", reply_markup=markup_support, parse_mode="HTML")

    elif message.text == '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã ü•∞':
        result = func_database(message.chat.id, data_user, select_func="checking_the_profile")

        if result:
            user_states[message.chat.id] = "view_profiles"

            markup_view_profiles = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            item_dislike = telebot.types.KeyboardButton('üëé')
            item_like = telebot.types.KeyboardButton('‚ù§Ô∏è')
            item_exit = telebot.types.KeyboardButton('‚ùå')
            item_message = telebot.types.KeyboardButton('üí¨')
            markup_view_profiles.row(item_like, item_message, item_dislike)
            markup_view_profiles.row(item_exit)

            view_profile[message.chat.id] = {"count": 0, "data": func_database(message.chat.id, data_user, select_func="viewing_profiles")}

            def view_profile_func(chat_id, number_profile:int): #view_profile[message.chat.id]['data'][view_profile[message.chat.id]['count']]
                global view_profile, text_photo
                if view_profile[chat_id]['count'] == len(view_profile[chat_id]['data']): #—Ç—É—Ç -1 –≤—ä–µ–±–∞—Ç—å –µ—Å–ª–∏ —à–æ —Ç–æ –ª–æ–º–∞–Ω–µ—Ç—å—Å—è
                    func_back_menu(chat_id, "–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.")

                else:
                    profile_data = view_profile[chat_id]['data'][number_profile]
                    photo = profile_data[1]
                    name = profile_data[2]
                    age = profile_data[3]
                    city = profile_data[4].split(',')[0]
                    purpose = profile_data[5]
                    description = profile_data[6]
                    distance = profile_data[7]

                    text_photo = f"<b>{name}, {age}, {city}, {purpose}</b>\n{description}\n{distance}"
                    bot.send_photo(chat_id, photo, caption=text_photo, parse_mode="HTML", reply_markup=markup_view_profiles)

            
            view_profile_func(message.chat.id, view_profile[message.chat.id]['count'])

            @bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "view_profiles")
            def handle_text(message):
                global user_states, view_profile

                if message.text == 'üëé':
                    if view_profile[message.chat.id]['count'] < len(view_profile[message.chat.id]['data']):
                        view_profile[message.chat.id]['count'] += 1
                        profile_data = view_profile[message.chat.id]['data'][view_profile[message.chat.id]['count']-1]
                        func_database(message.chat.id, data_user, select_func="viewed_profiles", id_profile=profile_data[0])
                        view_profile_func(message.chat.id, view_profile[message.chat.id]['count'])
                    else:
                        func_back_menu(message.chat.id, "–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.")


                elif message.text == 'üí¨':
                    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –ø–∏—Å—å–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ;)")
                    user_states[message.chat.id] = "view_profiles_send_message"

                    @bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "view_profiles_send_message")
                    def handle_message(message):
                        global user_states
                        if not message.text:
                            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∏—Å—å–º–æ.")
                        else:
                            user_message = message.text
                            user_states[message.chat.id] = "view_profiles"

                            if view_profile[message.chat.id]['count'] < len(view_profile[message.chat.id]['data']):
                                view_profile[message.chat.id]['count'] += 1
                                profile_data = view_profile[message.chat.id]['data'][view_profile[message.chat.id]['count'] - 1]
                                view_profile_func(message.chat.id, view_profile[message.chat.id]['count'])
                                func_database(message.chat.id, data_user, select_func="viewed_profiles", id_profile=profile_data[0])

                                markup_like = telebot.types.InlineKeyboardMarkup()
                                button_like = telebot.types.InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"like_profile_send_database_{message.chat.id}")
                                button_skip = telebot.types.InlineKeyboardButton("üëé", callback_data=f"not_like_profile_send_database_{message.chat.id}")

                                markup_like.add(button_like, button_skip)

                                liked_profile_data = func_database(message.chat.id, data_user, select_func="send_profile_user")

                                text_photo = f"<b>–í–∞–º –ø–∏—Å—å–º–æ!</b>\nüí¨ {user_message}\n<b>{liked_profile_data[1]}, {liked_profile_data[2]}, {liked_profile_data[3].split(',')[0]}, {liked_profile_data[4]}</b>\n{liked_profile_data[5]}"
                                bot.send_photo(profile_data[0], liked_profile_data[0], caption=text_photo, parse_mode="HTML", reply_markup=markup_like)
                            else:
                                func_back_menu(message.chat.id, "–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.")

                elif message.text == '‚ù§Ô∏è':
                    if view_profile[message.chat.id]['count'] < len(view_profile[message.chat.id]['data']):
                        view_profile[message.chat.id]['count'] += 1
                        profile_data = view_profile[message.chat.id]['data'][view_profile[message.chat.id]['count'] - 1]
                        view_profile_func(message.chat.id, view_profile[message.chat.id]['count'])
                        func_database(message.chat.id, data_user, select_func="viewed_profiles", id_profile=profile_data[0])

                        markup_like = telebot.types.InlineKeyboardMarkup()
                        button_like = telebot.types.InlineKeyboardButton("‚ù§Ô∏è", callback_data=f"like_profile_send_database_{message.chat.id}")
                        button_skip = telebot.types.InlineKeyboardButton("üëé", callback_data=f"not_like_profile_send_database_{message.chat.id}")

                        markup_like.add(button_like, button_skip)

                        liked_profile_data = func_database(message.chat.id, data_user, select_func="send_profile_user")

                        text_photo = f"<b>–í–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫!\n{liked_profile_data[1]}, {liked_profile_data[2]}, {liked_profile_data[3].split(',')[0]}, {liked_profile_data[4]}</b>\n{liked_profile_data[5]}"
                        bot.send_photo(profile_data[0], liked_profile_data[0], caption=text_photo, parse_mode="HTML", reply_markup=markup_like)
                    
                    else:
                        func_back_menu(message.chat.id, "–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.")

                elif message.text == '‚ùå':
                    markup_menu = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
                    back_menu = telebot.types.KeyboardButton('/menu')
                    markup_menu.add(back_menu)
                    user_states[message.chat.id] = "menu"
                    bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ:", reply_markup=markup_menu)
        else:
            user_states[message.chat.id] = "creating_profile"
            start_info(message)

def start_info(message):
    markup = telebot.types.InlineKeyboardMarkup()
    button_start = telebot.types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="switching_to_profile_editing")
    markup.row(button_start)

    photo_logo = open("/home/nikita_user/dating_telegram_bot/main/other_files/logo.jpg", "rb")
    text_photo = f"–ü—Ä–∏–≤–µ—Ç <b>{message.chat.first_name}</b>! {tx.date_info['start_info_text']}"
    bot.send_photo(message.chat.id, photo_logo, text_photo, reply_markup=markup, parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: True)
def switching_to_profile_editing(call):
    global data_user, view_profile
    chat_id = call.message.chat.id
    user_states[call.message.chat.id] = "creating_profile"

    if call.data == "switching_to_profile_editing":
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        bot.send_message(call.message.chat.id, "–ù–∞—á–Ω–µ–º", reply_markup=telebot.types.ReplyKeyboardRemove())

        data_user[call.from_user.id] = {
            "name": False, "gender": False,  
            "gender_search": False,
            "discription": False, "purpose": False,
            "age": False, "city": False,
            "photo": False, "id_user": False,
            "link_profile": False
        }
        username = call.from_user.username
        if username is None:
            msg = bot.send_message(chat_id, 
                "–í–∞—à–µ <b>–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> –≤ Telegram –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n"
                "(@ username).\n"
                "–í—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –±–æ—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∏ –≤–∑–∞–∏–º–Ω–æ–º –ª–∞–π–∫–µ —á–µ–ª–æ–≤–µ–∫ –º–æ–≥ –≤–∞–º –Ω–∞–ø–∏—Å–∞—Ç—å.\n"
                "<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ <b>—Ç—Ä–∏ —Ç–æ—á–∫–∏</b> –≤ –ª–µ–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —Ç–µ–ª–µ–≥—Ä–∞–º–∞.\n"
                "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>.\n"
                "3. –í—ã–±–µ—Ä–∏—Ç–µ <b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> –∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–Ω–æ–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å."
            , parse_mode="HTML")
            func_back_menu(chat_id, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–æ")
        else:
            data_user[call.from_user.id]["link_profile"] = f"@{username}"
            data_user[call.from_user.id]["id_user"] = call.from_user.id
            name_edit(chat_id)

    elif call.data == "record_female":
        if data_user[call.from_user.id]["gender"] == False:
            data_user[call.from_user.id]["gender"] = "–∂–µ–Ω—Å–∫–∏–π"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            gender_search_edit(chat_id)
    
    elif call.data == "record_male":
        if data_user[call.from_user.id]["gender"] == False:
            data_user[call.from_user.id]["gender"] = "–º—É–∂—Å–∫–æ–π"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            gender_search_edit(chat_id)

    elif call.data == "record_male_search":
        if data_user[call.from_user.id]["gender_search"] == False:
            data_user[call.from_user.id]["gender_search"]  = "–º—É–∂—á–∏–Ω"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            discription_profile(chat_id)

    elif call.data == "record_female_search":
        if data_user[call.from_user.id]["gender_search"]  == False:
            data_user[call.from_user.id]["gender_search"]  = "–∂–µ–Ω—â–∏–Ω"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            discription_profile(chat_id)

    elif call.data == "record_communication":
        if data_user[call.from_user.id]["purpose"] == False:
            data_user[call.from_user.id]["purpose"] = "–æ–±—â–µ–Ω–∏–µ"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            age_edit(chat_id)

    elif call.data == "record_friendship":
        if data_user[call.from_user.id]["purpose"] == False:
            data_user[call.from_user.id]["purpose"] = "–¥—Ä—É–∂–±–∞"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            age_edit(chat_id)

    elif call.data == "record_relationships":
        if data_user[call.from_user.id]["purpose"] == False:
            data_user[call.from_user.id]["purpose"] = "–æ—Ç–Ω–æ—à–µ–Ω–∏—è"
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            age_edit(chat_id)
    
    elif call.data == "everything_is_right":
        everything_is_right(chat_id, data_user)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)

    elif call.data == "fill_it_in_again":
        fill_it_in_again(chat_id)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)


    #–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    elif call.data == "check_delete_profile":
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        user_states[call.message.chat.id] = "delete_profile"

        markup_check_delete = telebot.types.InlineKeyboardMarkup()
        button_check_yes = telebot.types.InlineKeyboardButton("–î–∞", callback_data="delete_profile")
        button_check_no = telebot.types.InlineKeyboardButton("–ù–µ—Ç", callback_data="not_delete_profile")
        markup_check_delete.row(button_check_yes, button_check_no)
        bot.send_message(call.message.chat.id, "‚ùó<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</b>‚ùó", reply_markup=markup_check_delete, parse_mode="HTML")

    elif call.data == "delete_profile":
        func_database(call.message.chat.id, data_user, select_func="clear_viewed_profiles")
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        func_database(call.message.chat.id, data_user, select_func="delete_profile")
        func_back_menu(chat_id, "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        
    elif call.data == "not_delete_profile":
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        func_back_menu(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ:")

    elif call.data == "back_city_edit":
        data_user[call.from_user.id]["city"] = False
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
        city_edit(chat_id)

    elif call.data == "gps_send":
        data_user[call.from_user.id]["city"] = 1
        ask_gps_send(call.message.chat.id)
        bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)


    #–®–Ω—è–≥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Ç—É—Ç –æ—á–µ–Ω—å –æ–±–∏–¥–Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –∫–∞–∫ –≤—Å–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ edit_profile
    elif call.data == "edit_profile":
        func_database(call.message.chat.id, data_user, select_func="clear_viewed_profiles")
        func_edit_profile(bot, call.message.chat.id, call, user_states, data_user)

    elif call.data == "record_female_edit":
        if data_user[call.from_user.id]["gender"] == False:
            data_user[call.from_user.id]["gender"] = "–∂–µ–Ω—Å–∫–∏–π"
            func_database(chat_id, data_user, select_func="update_profile_field")
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            func_back_menu(chat_id, "–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
            data_user[call.from_user.id]["gender"] = False

    elif call.data == "record_male_edit":
        if data_user[call.from_user.id]["gender"] == False:
            data_user[call.from_user.id]["gender"] = "–º—É–∂—Å–∫–æ–π"
            func_database(chat_id, data_user, select_func="update_profile_field")
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            func_back_menu(chat_id, "–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
            data_user[call.from_user.id]["gender"] = False

    elif call.data == "record_communication_edit":
        if data_user[call.from_user.id]["purpose"] == False:
            data_user[call.from_user.id]["purpose"] = "–æ–±—â–µ–Ω–∏–µ"
            func_database(chat_id, data_user, select_func="update_profile_field")
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            func_back_menu(chat_id, "–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            data_user[call.from_user.id]["purpose"] = False

    elif call.data == "record_friendship_edit":
        if data_user[call.from_user.id]["purpose"] == False:
            data_user[call.from_user.id]["purpose"] = "–¥—Ä—É–∂–±–∞"
            func_database(chat_id, data_user, select_func="update_profile_field")
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            func_back_menu(chat_id, "–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            data_user[call.from_user.id]["purpose"] = False

    elif call.data == "record_relationships_edit":
        if data_user[call.from_user.id]["purpose"] == False:
            data_user[call.from_user.id]["purpose"] = "–æ—Ç–Ω–æ—à–µ–Ω–∏—è"
            func_database(chat_id, data_user, select_func="update_profile_field")
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            func_back_menu(chat_id, "–¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            data_user[call.from_user.id]["purpose"] = False
    
    elif call.data == "record_male_search_edit":
        if data_user[call.from_user.id]["gender_search"] == False:
            data_user[call.from_user.id]["gender_search"]  = "–º—É–∂—á–∏–Ω"
            func_database(chat_id, data_user, select_func="update_profile_field")
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            func_back_menu(chat_id, "–¶–µ–ª—å –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            data_user[call.from_user.id]["gender_search"] = False

    elif call.data == "record_female_search_edit":
        if data_user[call.from_user.id]["gender_search"]  == False:
            data_user[call.from_user.id]["gender_search"]  = "–∂–µ–Ω—â–∏–Ω"
            func_database(chat_id, data_user, select_func="update_profile_field")
            bot.edit_message_reply_markup(chat_id, call.message.message_id, reply_markup=None)
            func_back_menu(chat_id, "–¶–µ–ª—å –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
            data_user[call.from_user.id]["gender_search"] = False

    elif call.data.startswith("next_profile_"):
        profile_count = int(call.data.split("_")[-1])
        profiles = view_profile[chat_id]["data"]
        
        if profile_count < len(profiles):
            view_profile[chat_id]["count"] = profile_count
            bot.delete_message(chat_id, call.message.message_id)
            send_profile(chat_id, profiles[profile_count], profile_count, len(profiles))
        else:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—å.")
    
    elif call.data.startswith("like_profile_send_database_"):
        sender_chat_id = int(call.data.split("_")[-1])
        profile_id = func_database(sender_chat_id, data_user, select_func="send_profile_user")

        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        
        func_database(call.message.chat.id, data_user, select_func="like_profile", id_profile=profile_id[6])
        func_database(profile_id[6], data_user, select_func="like_profile", id_profile=call.message.chat.id)

        func_back_menu(call.message.chat.id, "–ü–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∞–π–∫, –∑–∞–π–¥–∏—Ç–µ –≤ —Å–∏–º–ø–∞—Ç–∏–∏.")
        bot.send_message(profile_id[6], "–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞!!!\n–ü–µ—Ä–µ–π–¥–∏ –≤ <b>—Å–∏–º–ø–∞—Ç–∏–∏</b>", parse_mode="HTML")

    elif call.data.startswith("not_like_profile_send_database_"):
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
        func_back_menu(chat_id, "–ê–Ω–∫–µ—Ç–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")


def ask_gps_send(chat_id):
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    button_geo = telebot.types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)
    markup.add(button_geo)
    bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=markup)

@bot.message_handler(content_types=['location'])
def handle_location(message):
    if user_states.get(message.chat.id) == "creating_profile" and data_user[message.from_user.id]["city"] == 1:
        user_id = message.from_user.id
        latitude = message.location.latitude
        longitude = message.location.longitude
        
        response = requests.get(f"https://api.opencagedata.com/geocode/v1/json?q={latitude}+{longitude}&key={data_json["OPENCAGE_API_KEY"]}")
        result = response.json()
        
        if result['results']:
            components = result['results'][0]['components']
            city = components.get('city') or components.get('town') or components.get('village') or components.get('hamlet') or 'Unknown'
            full_location = f"{city}, {latitude}, {longitude}"
            data_user[user_id]["city"] = full_location
            full_location = None
            
            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.", reply_markup=telebot.types.ReplyKeyboardRemove())
            
            photo_edit(message.chat.id)
            
        else:
            markup_back_write_coords_send = telebot.types.InlineKeyboardMarkup()
            button_back_write_coords_send = telebot.types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_city_edit") 
            markup_back_write_coords_send.row(button_back_write_coords_send)
            bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞, –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥.", reply_markup=markup_back_write_coords_send)


def name_edit(chat_id):
    global data_user
    delete_message_bot = bot.send_message(chat_id, f"{tx.date_info["profile_edit_text"]}\n{tx.date_info["name_text"]}")
    @bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "creating_profile" and (data_user[message.from_user.id]["name"] == False))
    def name_edit(message):
        max_length = message.text
        if 2 <= len(max_length) <= 20: 
            data_user[message.from_user.id]["name"] = max_length
            gender_edit(message.chat.id)
        else:
            data_user[message.from_user.id]["name"] = False
            bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –ª–∏–∫–≤–∏–¥–Ω–æ, <b>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ <b>20</b> —Å–∏–º–≤–æ–ª–æ–≤, –∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏–º–µ–Ω–∏ <b>2</b> —Å–∏–º–≤–æ–ª–∞", parse_mode="HTML")

def gender_edit(chat_id):
    markup_gender = telebot.types.InlineKeyboardMarkup()
    button_male = telebot.types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="record_male")
    button_female = telebot.types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="record_female")
    markup_gender.add(button_male, button_female)

    bot.send_message(chat_id, "–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ø–æ–ª–æ–º", reply_markup=markup_gender)

def gender_search_edit(chat_id):
    markup_gender_search = telebot.types.InlineKeyboardMarkup()
    button_male = telebot.types.InlineKeyboardButton("–ú—É–∂—á–∏–Ω", callback_data="record_male_search")
    button_female = telebot.types.InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω", callback_data="record_female_search")
    markup_gender_search.row(button_male, button_female)

    bot.send_message(chat_id, "–ö–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏?", reply_markup=markup_gender_search)

def discription_profile(chat_id):
    bot.send_message(chat_id, "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ :")
    @bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "creating_profile" and (data_user[message.from_user.id]["discription"] == False))
    def discription_edit(message):
        max_length = message.text
        if len(max_length) <= 1500: 
            data_user[message.from_user.id]["discription"] = message.text
            purpose_edit(message.chat.id)
        else:
            data_user[message.from_user.id]["discription"] = False
            bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –ª–∏–∫–≤–∏–¥–Ω–æ, <b>–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è <b>1500</b> —Å–∏–º–≤–æ–ª–æ–≤", parse_mode="HTML")


def purpose_edit(chat_id):
    global data_user

    if data_user[chat_id]["gender"][0:3] == data_user[chat_id]["gender_search"][0:3]:
        markup_purpose = telebot.types.InlineKeyboardMarkup()
        button_communication = telebot.types.InlineKeyboardButton("–û–±—â–µ–Ω–∏–µ", callback_data="record_communication")
        button_friendship = telebot.types.InlineKeyboardButton("–î—Ä—É–∂–±–∞", callback_data="record_friendship")
        markup_purpose.row(button_communication, button_friendship)

    else:
        markup_purpose = telebot.types.InlineKeyboardMarkup()
        button_communication = telebot.types.InlineKeyboardButton("–û–±—â–µ–Ω–∏–µ", callback_data="record_communication")
        button_friendship = telebot.types.InlineKeyboardButton("–î—Ä—É–∂–±–∞", callback_data="record_friendship")
        button_relationships = telebot.types.InlineKeyboardButton("–û—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="record_relationships")
        markup_purpose.row(button_communication, button_friendship)
        markup_purpose.row(button_relationships)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ :", reply_markup=markup_purpose)
        
def age_edit(chat_id):
    bot.send_message(chat_id, "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?")
    @bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "creating_profile" and (data_user[message.from_user.id]["age"] == False))
    def age_edit(message):
        try:
            type_int = int(message.text)
            if type_int <= 15:
                data_user[message.from_user.id]["age"] = False  
                bot.send_message(message.chat.id, "–í–æ–∑—Ä–∞—Å—Ç —Å–ª–∏—à–∫–æ–º <b>–º–∞–ª–µ–Ω—å–∫–∏–π</b>, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.", parse_mode="HTML")

            elif type_int > 100:
                data_user[message.from_user.id]["age"] = False  
                bot.send_message(message.chat.id, "–í–æ–∑—Ä–∞—Å—Ç —Å–ª–∏—à–∫–æ–º <b>–±–æ–ª—å—à–æ–π</b>, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.", parse_mode="HTML")

            else:
                data_user[message.from_user.id]["age"] = message.text
                city_edit(message.chat.id)

        except:  
            data_user[message.from_user.id]["age"] = False  
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ —É–∫–∞–∑–∞—Ç—å –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, –≤–≤–µ–¥—è <b>—á–∏—Å–ª–æ</b> –æ—Ç <b>10 –¥–æ 99.</b>", parse_mode="HTML")

def city_edit(chat_id):
    bot.send_message(chat_id, "–í–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ :")
    @bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "creating_profile" and (data_user[message.from_user.id]["city"] == False))
    def city_edit(message):
        max_length = message.text
        if len(max_length) <= 60: 
            if str(max_length).capitalize() in city_coords:
                coords = city_coords[message.text.capitalize()]
                city_with_coords = f"{message.text.capitalize()}, {coords[0]}, {coords[1]}"
                data_user[message.from_user.id]["city"] = city_with_coords
                photo_edit(message.chat.id)

            else:
                possible_cities = get_close_matches(str(max_length).capitalize(), city_coords.keys(), n=1, cutoff=0.6)

                if possible_cities:
                    markup_option = telebot.types.InlineKeyboardMarkup()
                    button_gps = telebot.types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å gps –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã", callback_data="gps_send")
                    markup_option.row(button_gps)

                    bot.send_message(message.chat.id, f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: <b>{possible_cities[0]}</b> \n–ú–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑, –Ω–µ –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É:", reply_markup = markup_option, parse_mode="HTML")

                else:
                    markup_input_selection = telebot.types.InlineKeyboardMarkup()
                    button_gps = telebot.types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å gps –∫–æ—Ä–¥–∏–Ω–∞—Ç—ã", callback_data="gps_send")
                    markup_input_selection.add(button_gps)

                    bot.send_message(message.chat.id, 
                                    "–¢–∞–∫–æ–≥–æ <b>–≥–æ—Ä–æ–¥–∞</b> –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.\n"
                                    "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.</b>\n"
                                    "–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å, –Ω–µ –∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑\n"
                                    "–ï—Å–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ –º–æ–∂–µ—Ç–µ:\n"
                                    "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n",
                                    parse_mode="HTML", reply_markup=markup_input_selection)
        else:
            bot.send_message(message.chat.id, "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç–∫–∏ –≤ –Ω–µ–π—Ä–æ–Ω–∫—É
def save_photo_from_telegram(bot, file_id, user_id):
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    temp_file_path = f"temp_image_{user_id}.jpg"  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    with open(temp_file_path, 'wb') as new_file:
        new_file.write(downloaded_file)
    return temp_file_path

def photo_edit(chat_id):
    bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
    bot.send_message(chat_id, "<b>–í–∞–∂–Ω–æ!</b> –ù–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç—á–µ—Ç–ª–∏–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–Ω–æ –ª–∏—Ü–æ.", parse_mode="HTML")

    @bot.message_handler(content_types=['photo'], func=lambda message: data_user[message.from_user.id]["photo"] == False) # @bot.message_handler(content_types=['photo'])
    def handle_photo(message):
        file_id = message.photo[-1].file_id
        photo_path = save_photo_from_telegram(bot, file_id, message.from_user.id)

        nude_detector = nudenet.NudeDetector()
        result = nude_detector.detect(photo_path)
        if (len(result) == 0 or
            all(entry["class"] not in {'MALE_GENITALIA_EXPOSED', 'FEMALE_BREAST_EXPOSED',
                                        'MALE_GENITALIA_COVERED', 'FEMALE_GENITALIA_EXPOSED',
                                        'MALE_GENITALIA_PARTLY_EXPOSED', 'FEMALE_GENITALIA_PARTLY_EXPOSED',
                                        'MALE_ANUS', 'FEMALE_ANUS'} for entry in result)):
            if any(entry['class'] == 'FACE_FEMALE' for entry in result):
                data_user[message.from_user.id]["photo"] = file_id
                check_profile(message.from_user.id) 
            else:
                bot.send_message(message.chat.id, "–õ–∏—Ü–æ –Ω–∞ —Ñ–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.")
        else:
            bot.send_message(message.chat.id, "–ù–∞ —Ñ–æ—Ç–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø—Ä–æ—Å—å–±–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–µ–∑ –Ω–∞–≥–æ—Ç—ã.")

        os.remove(photo_path)

def check_profile(user_id):  
    markup = telebot.types.InlineKeyboardMarkup()
    button_good = telebot.types.InlineKeyboardButton("–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ", callback_data="everything_is_right")
    button_again = telebot.types.InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="switching_to_profile_editing")
    markup.row(button_good)
    markup.row(button_again)

    text_photo = f"<b>{data_user[user_id]['name']}, {data_user[user_id]['age']}, {data_user[user_id]['city'].split(', ')[0]}, {data_user[user_id]['purpose']}</b>\n{data_user[user_id]['discription']}"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å

    bot.send_photo(user_id, data_user[user_id]["photo"], caption=text_photo, parse_mode="HTML", reply_markup=markup) 
        
def everything_is_right(chat_id, data_user):
    global user_states

    func_database(chat_id, data_user, select_func="send_database_profile")
    data_user[chat_id] = {}
    del data_user[chat_id]
    func_back_menu(chat_id, "–û—Ç–ª–∏—á–Ω–æ!")

# bot.polling(none_stop=True)
if __name__ == "__main__":
    bot.send_message(6491217944, "–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ /start –∏–ª–∏ /menu –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.")
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            func_back_menu(current_chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ —Å–æ–æ–±—â–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            bot.send_message(6491217944, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É {current_chat_id}: {e}")
